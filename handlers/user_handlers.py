from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from keyboards.keyboards import format_kb, time_kb, confirm_kb
from lexicon.lexicon_ru import LEXICON_RU

router = Router()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU['/start'], reply_markup=format_kb)


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
@router.message(F.text.in_(['–û–Ω–ª–∞–π–Ω', '–í –æ—Ñ–∏—Å–µ']))
async def process_format_choice(message: Message):
    if message.text == '–û–Ω–ª–∞–π–Ω':
        await message.answer(text=LEXICON_RU['–û–Ω–ª–∞–π–Ω'], reply_markup=time_kb)
    else:
        await message.answer(text=LEXICON_RU['–í –æ—Ñ–∏—Å–µ'], reply_markup=time_kb)


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è
@router.message(F.text.in_(['10:00', '14:00', '18:00']))
async def process_time_choice(message: Message):
    await message.answer(
        text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {message.text}\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
        reply_markup=confirm_kb
    )


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@router.message(F.text == '‚úÖ –î–∞')
async def process_confirmation(message: Message):
    await message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã. –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–∏–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.'
    )


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å')
async def process_change(message: Message):
    await message.answer(
        text='–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è:',
        reply_markup=format_kb
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer('–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö.\n–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: "–ì–¥–µ –æ—Ñ–∏—Å?" –∏–ª–∏ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?"')

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∞–¥—Ä–µ—Å–µ
@router.message(F.text.lower().in_(['–≥–¥–µ –æ—Ñ–∏—Å', '–∞–¥—Ä–µ—Å', '–∫–∞–∫ –Ω–∞–π—Ç–∏', '–≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å']))
async def process_address_question(message: Message):
    await message.answer(LEXICON_RU['FAQ_–∞–¥—Ä–µ—Å'])

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@router.message(F.text.lower().in_(['—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–ª–∞—Ç–Ω–æ']))
async def process_price_question(message: Message):
    await message.answer(LEXICON_RU['FAQ_—Å—Ç–æ–∏–º–æ—Å—Ç—å'])

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message()
async def process_other_message(message: Message):
    await message.answer(text=LEXICON_RU['other_answer'])
